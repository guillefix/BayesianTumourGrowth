function [V_posterior_predictive_1_array, ...
    V_posterior_predictive_2_array, ...
    V_posterior_predictive_sum_array] = ...
    get_samples_from_posterior_predictive_distributions_gomp(experiment_to_consider, ...
number_of_samples_from_normal_distribution_around_solution,...
    rc_samples_from_posterior,...
Kc_samples_from_posterior, ...
lc_samples_from_posterior,...
rr_samples_from_posterior,...
Kr_samples_from_posterior,...
lr_samples_from_posterior,...
V0_sum_samples_from_posterior, sigma_samples_from_posterior)
% Gets a sample of parameters from posterior, (rr, Kr, lr, rc, Kc, lc, V0, sigma)
% and returns posterior predictive distributions using these parameters,
% solving the ODE and returning sampled Vc and Vr values drawn from a
% normal distribution centred at each time point around the Vc or Vr
% solution of the ODE
%
% For the input parameter experiment_to_consider: its value is between 1 and 5,
% and each value encodes and maps to a particular ratio chosen in a certain experiment.
% The mapping is the following :
% 1 -> 1:0
% 2 -> 3:1
% 3 -> 1:1
% 4 -> 1:3
% 5 -> 0:1

%% 0. Parameters setting

% Enter parameters

odds_of_initial_values = [1,0;
                          3,1;
                          1,1;
                          1,3;
                          0,1];

beginning_time = 1;
end_time = 15;

time_first_individual_data = 10;
sampling_timestep_individual_data = 5;
number_of_experimental_repeats = 12;


% Calculations from parameters

    % Sampled times
offset_time_first_individual_data = time_first_individual_data - beginning_time;
sampled_times_individual_data = beginning_time+offset_time_first_individual_data:...
    sampling_timestep_individual_data:...
    end_time;
sampled_times_sum_data = [3, 5, 7, 10, 13, 15];

number_of_sampled_times_individual_variables = size(sampled_times_individual_data,2);
number_of_sampled_times_sum = size(sampled_times_sum_data,2);

    % Ratio of odds _max_100to get V0 of individual dependent variables (Vc and Vr)
sum_of_odds = odds_of_initial_values(experiment_to_consider,1) + ...
odds_of_initial_values(experiment_to_consider,2);
ratio_V0_C = odds_of_initial_values(experiment_to_consider,1) / ...
sum_of_odds;
ratio_V0_R = odds_of_initial_values(experiment_to_consider,2) / ...
sum_of_odds;

    % Miscellaneous
tspan = [beginning_time , end_time];

number_of_parameter_samples = length(rc_samples_from_posterior);

% rc_samples_from_posterior_max_100 = datasample(rc_samples_from_posterior,...
%     number_of_parameter_samples);
% Kc_samples_from_posterior_max_100 = datasample(Kc_samples_from_posterior,...
%     number_of_parameter_samples);
% lc_samples_from_posterior_max_100 = datasample(lc_samples_from_posterior,...
%     number_of_parameter_samples);
% rr_samples_from_posterior_max_100 = datasample(rr_samples_from_posterior,...
%     number_of_parameter_samples);
% Kr_samples_from_posterior_max_100 = datasample(Kr_samples_from_posterior,...
%     number_of_parameter_samples);
% lr_samples_from_posterior_max_100 = datasample(lr_samples_from_posterior,...
%     number_of_parameter_samples);
% V0_sum_samples_from_posterior_max_100 = datasample(V0_sum_samples_from_posterior,...
%     number_of_parameter_samples);
% sigma_samples_from_posterior_max_100 = datasample(sigma_samples_from_posterior,...
%     number_of_parameter_samples);

sigma_sum_normal_samples_from_posterior = ...
    sigma_samples_from_posterior ./ ...
    sqrt(number_of_experimental_repeats);

V_posterior_predictive_1_array = nan(number_of_parameter_samples*...
    number_of_samples_from_normal_distribution_around_solution,...
    number_of_sampled_times_individual_variables);

V_posterior_predictive_2_array = nan(number_of_parameter_samples*...
    number_of_samples_from_normal_distribution_around_solution,...
    number_of_sampled_times_individual_variables);

V_posterior_predictive_sum_array = nan(number_of_parameter_samples*...
    number_of_samples_from_normal_distribution_around_solution,...
    number_of_sampled_times_sum);

V0_samples_from_posterior = nan(number_of_parameter_samples, 2);

for parameter_sample_number = 1 : number_of_parameter_samples
    %% 1. solve the ODE model with the previously sampled (rr, Kr, lr, rc, Kc, lc, V0)
    % and a defined ratio r (1:0, 1:1, 3:1...), the result are mu_R, mu_C, mu_sum

    if (mod(parameter_sample_number,10) == 0)
        display(['Posterior predictive ODE solving number = ', num2str(parameter_sample_number)]);
    end

    V0_samples_from_posterior(parameter_sample_number,:) =...
        [V0_sum_samples_from_posterior(parameter_sample_number)*...
        ratio_V0_C+0.0001, ...
    V0_sum_samples_from_posterior(parameter_sample_number)*...
    ratio_V0_R+0.0001];

    [t,V_posterior_predictive] = ode45(...
        @(t,V) ode_gomp(t, V, ...
        rc_samples_from_posterior(parameter_sample_number), ...
        Kc_samples_from_posterior(parameter_sample_number), ...
        lc_samples_from_posterior(parameter_sample_number), ...
        rr_samples_from_posterior(parameter_sample_number), ...
        Kr_samples_from_posterior(parameter_sample_number), ...
        lr_samples_from_posterior(parameter_sample_number)), ...
            tspan,...
            V0_samples_from_posterior(parameter_sample_number,:));


    %% 2. draw samples from Normal(mu_R (== V_posterior_predictive(:,1)), sigma),
    % Normal(mu_C (== V_posterior_predictive(:,2)), sigma),
    % Normal(mu_sum, sigma).
    for normal_sample_number = 1 : ...
            number_of_samples_from_normal_distribution_around_solution

        V_posterior_predictive_1_not_interpolated = ...
            normrnd(V_posterior_predictive(:,1),...
            sigma_samples_from_posterior(parameter_sample_number));
        V_posterior_predictive_2_not_interpolated = ...
            normrnd(V_posterior_predictive(:,2),...
            sigma_samples_from_posterior(parameter_sample_number));
        V_posterior_predictive_sum_not_interpolated = ...
            normrnd(V_posterior_predictive(:,1) + ...
            V_posterior_predictive(:,2),...
            sigma_sum_normal_samples_from_posterior(parameter_sample_number));

        sample_index = number_of_samples_from_normal_distribution_around_solution * ...
        (parameter_sample_number - 1) + normal_sample_number;

        V_posterior_predictive_1_array(sample_index,:) = ...
            interp1(t,V_posterior_predictive_1_not_interpolated,...
            sampled_times_individual_data);
        V_posterior_predictive_2_array(sample_index,:) = ...
            interp1(t,V_posterior_predictive_2_not_interpolated,...
            sampled_times_individual_data);
        V_posterior_predictive_sum_array(sample_index,:) = ...
            interp1(t,V_posterior_predictive_sum_not_interpolated, ...
            sampled_times_sum_data);
    end
end

display('got samples from posterior predictivedistributions');
end
