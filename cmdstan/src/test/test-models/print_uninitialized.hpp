// Code generated by Stan version 2.14

#include <stan/model/model_header.hpp>

namespace print_uninitialized_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

class print_uninitialized_model : public prob_grad {
private:
    double udummy;
public:
    print_uninitialized_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        typedef boost::ecuyer1988 rng_t;
        rng_t base_rng(0);  // 0 seed default
        ctor_body(context__, base_rng, pstream__);
    }

    template <class RNG>
    print_uninitialized_model(stan::io::var_context& context__,
        RNG& base_rng__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, base_rng__, pstream__);
    }

    template <class RNG>
    void ctor_body(stan::io::var_context& context__,
                   RNG& base_rng__,
                   std::ostream* pstream__) {
        current_statement_begin__ = -1;

        static const char* function__ = "print_uninitialized_model_namespace::print_uninitialized_model";
        (void) function__; // dummy call to supress warning
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables

        // validate, data variables
        // initialize data variables
        udummy = double(0);
        stan::math::fill(udummy,DUMMY_VAR__);

        try {
            {
                double v(0.0);
                (void) v;  // dummy to suppress unused var warning
                stan::math::initialize(v, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(v,DUMMY_VAR__);
                vector<double> vv(10, 0.0);
                stan::math::initialize(vv, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(vv,DUMMY_VAR__);
                vector_d vvv(static_cast<Eigen::VectorXd::Index>(12));
                (void) vvv;  // dummy to suppress unused var warning
                stan::math::initialize(vvv, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(vvv,DUMMY_VAR__);
                matrix_d vvvv(static_cast<Eigen::VectorXd::Index>(10),static_cast<Eigen::VectorXd::Index>(10));
                (void) vvvv;  // dummy to suppress unused var warning
                stan::math::initialize(vvvv, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(vvvv,DUMMY_VAR__);
                vector<matrix_d> vvvvv(5, (matrix_d(static_cast<Eigen::VectorXd::Index>(3),static_cast<Eigen::VectorXd::Index>(4))));
                stan::math::initialize(vvvvv, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(vvvvv,DUMMY_VAR__);


                current_statement_begin__ = 9;
                if (pstream__) {
                    stan_print(pstream__,"transformed data: ");
                    stan_print(pstream__,v);
                    stan_print(pstream__,"  ");
                    stan_print(pstream__,get_base1(vv,1,"vv",1));
                    stan_print(pstream__,"  ");
                    stan_print(pstream__,get_base1(vvv,2,"vvv",1));
                    stan_print(pstream__,"  ");
                    stan_print(pstream__,get_base1(vvvv,3,4,"vvvv",1));
                    stan_print(pstream__,"  ");
                    stan_print(pstream__,get_base1(get_base1(vvvvv,1,"vvvvv",1),2,3,"vvvvv",2));
                    *pstream__ << std::endl;
                }
                current_statement_begin__ = 9;
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        ++num_params_r__;
    }

    ~print_uninitialized_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("y")))
            throw std::runtime_error("variable y missing");
        vals_r__ = context__.vals_r("y");
        pos__ = 0U;
        context__.validate_dims("initialization", "y", "double", context__.to_vec());
        // generate_declaration y
        double y(0);
        y = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(y);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable y: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        T__ y;
        (void) y;  // dummy to suppress unused var warning
        if (jacobian__)
            y = in__.scalar_constrain(lp__);
        else
            y = in__.scalar_constrain();


        // transformed parameters
        T__ wdummy;
        (void) wdummy;  // dummy to suppress unused var warning
        stan::math::initialize(wdummy, DUMMY_VAR__);
        stan::math::fill(wdummy,DUMMY_VAR__);


        try {
            {
                T__ w;
                (void) w;  // dummy to suppress unused var warning
                stan::math::initialize(w, DUMMY_VAR__);
                stan::math::fill(w,DUMMY_VAR__);
                vector<T__> ww(10);
                stan::math::initialize(ww, DUMMY_VAR__);
                stan::math::fill(ww,DUMMY_VAR__);
                Eigen::Matrix<T__,Eigen::Dynamic,1>  www(static_cast<Eigen::VectorXd::Index>(12));
                (void) www;  // dummy to suppress unused var warning
                stan::math::initialize(www, DUMMY_VAR__);
                stan::math::fill(www,DUMMY_VAR__);
                Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  wwww(static_cast<Eigen::VectorXd::Index>(10),static_cast<Eigen::VectorXd::Index>(10));
                (void) wwww;  // dummy to suppress unused var warning
                stan::math::initialize(wwww, DUMMY_VAR__);
                stan::math::fill(wwww,DUMMY_VAR__);
                vector<Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic> > wwwww(5, (Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(3),static_cast<Eigen::VectorXd::Index>(4))));
                stan::math::initialize(wwwww, DUMMY_VAR__);
                stan::math::fill(wwwww,DUMMY_VAR__);


                current_statement_begin__ = 23;
                if (pstream__) {
                    stan_print(pstream__,"transformed parameters: ");
                    stan_print(pstream__,w);
                    stan_print(pstream__," ");
                    stan_print(pstream__,get_base1(ww,1,"ww",1));
                    stan_print(pstream__," ");
                    stan_print(pstream__,get_base1(www,2,"www",1));
                    stan_print(pstream__," ");
                    stan_print(pstream__,get_base1(wwww,3,4,"wwww",1));
                    stan_print(pstream__," ");
                    stan_print(pstream__,get_base1(get_base1(wwwww,1,"wwwww",1),2,3,"wwwww",2));
                    *pstream__ << std::endl;
                }
                current_statement_begin__ = 23;
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        if (stan::math::is_uninitialized(wdummy)) {
            std::stringstream msg__;
            msg__ << "Undefined transformed parameter: wdummy";
            throw std::runtime_error(msg__.str());
        }

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning

        // model body
        try {
            {
                T__ z;
                (void) z;  // dummy to suppress unused var warning
                stan::math::initialize(z, DUMMY_VAR__);
                stan::math::fill(z,DUMMY_VAR__);
                vector<T__> zz(10);
                stan::math::initialize(zz, DUMMY_VAR__);
                stan::math::fill(zz,DUMMY_VAR__);
                Eigen::Matrix<T__,Eigen::Dynamic,1>  zzz(static_cast<Eigen::VectorXd::Index>(12));
                (void) zzz;  // dummy to suppress unused var warning
                stan::math::initialize(zzz, DUMMY_VAR__);
                stan::math::fill(zzz,DUMMY_VAR__);
                Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  zzzz(static_cast<Eigen::VectorXd::Index>(10),static_cast<Eigen::VectorXd::Index>(10));
                (void) zzzz;  // dummy to suppress unused var warning
                stan::math::initialize(zzzz, DUMMY_VAR__);
                stan::math::fill(zzzz,DUMMY_VAR__);
                vector<Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic> > zzzzz(10, (Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(10),static_cast<Eigen::VectorXd::Index>(10))));
                stan::math::initialize(zzzzz, DUMMY_VAR__);
                stan::math::fill(zzzzz,DUMMY_VAR__);


                current_statement_begin__ = 32;
                if (pstream__) {
                    stan_print(pstream__,"model: ");
                    stan_print(pstream__,z);
                    stan_print(pstream__," ");
                    stan_print(pstream__,get_base1(zz,1,"zz",1));
                    stan_print(pstream__," ");
                    stan_print(pstream__,get_base1(zzz,2,"zzz",1));
                    stan_print(pstream__," ");
                    stan_print(pstream__,get_base1(zzzz,3,4,"zzzz",1));
                    stan_print(pstream__," ");
                    stan_print(pstream__,get_base1(get_base1(zzzzz,3,"zzzzz",1),4,5,"zzzzz",2));
                    *pstream__ << std::endl;
                }
                current_statement_begin__ = 32;
                current_statement_begin__ = 33;
                lp_accum__.add(normal_log<propto__>(y, 0, 1));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("y");
        names__.push_back("wdummy");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "print_uninitialized_model_namespace::write_array";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        double y = in__.scalar_constrain();
        vars__.push_back(y);

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        double wdummy(0.0);
        (void) wdummy;  // dummy to suppress unused var warning
        stan::math::initialize(wdummy, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(wdummy,DUMMY_VAR__);


        try {
            {
                double w(0.0);
                (void) w;  // dummy to suppress unused var warning
                stan::math::initialize(w, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(w,DUMMY_VAR__);
                vector<double> ww(10, 0.0);
                stan::math::initialize(ww, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(ww,DUMMY_VAR__);
                vector_d www(static_cast<Eigen::VectorXd::Index>(12));
                (void) www;  // dummy to suppress unused var warning
                stan::math::initialize(www, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(www,DUMMY_VAR__);
                matrix_d wwww(static_cast<Eigen::VectorXd::Index>(10),static_cast<Eigen::VectorXd::Index>(10));
                (void) wwww;  // dummy to suppress unused var warning
                stan::math::initialize(wwww, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(wwww,DUMMY_VAR__);
                vector<matrix_d> wwwww(5, (matrix_d(static_cast<Eigen::VectorXd::Index>(3),static_cast<Eigen::VectorXd::Index>(4))));
                stan::math::initialize(wwwww, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(wwwww,DUMMY_VAR__);


                current_statement_begin__ = 23;
                if (pstream__) {
                    stan_print(pstream__,"transformed parameters: ");
                    stan_print(pstream__,w);
                    stan_print(pstream__," ");
                    stan_print(pstream__,get_base1(ww,1,"ww",1));
                    stan_print(pstream__," ");
                    stan_print(pstream__,get_base1(www,2,"www",1));
                    stan_print(pstream__," ");
                    stan_print(pstream__,get_base1(wwww,3,4,"wwww",1));
                    stan_print(pstream__," ");
                    stan_print(pstream__,get_base1(get_base1(wwwww,1,"wwwww",1),2,3,"wwwww",2));
                    *pstream__ << std::endl;
                }
                current_statement_begin__ = 23;
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        // write transformed parameters
        vars__.push_back(wdummy);

        if (!include_gqs__) return;
        // declare and define generated quantities


        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "print_uninitialized_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "y";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "wdummy";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "y";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "wdummy";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__) return;
    }

}; // model

} // namespace

typedef print_uninitialized_model_namespace::print_uninitialized_model stan_model;

