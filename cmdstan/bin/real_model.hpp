// Code generated by Stan version 2.14

#include <stan/model/model_header.hpp>

namespace real_model_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type>
ode_diff(const T0__& t,
             const std::vector<T1__>& V,
             const std::vector<T2__>& theta,
             const std::vector<T3__>& x_r,
             const std::vector<int>& x_i, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
            vector<fun_scalar_t__> dVdt(2);
            stan::math::initialize(dVdt, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(dVdt,DUMMY_VAR__);


            current_statement_begin__ = 5;
            stan::math::assign(get_base1_lhs(dVdt,1,"dVdt",1), (get_base1(V,1,"V",1) * ((get_base1(theta,1,"theta",1) * (1 - (get_base1(V,1,"V",1) / get_base1(theta,2,"theta",1)))) - (get_base1(theta,3,"theta",1) * get_base1(V,2,"V",1)))));
            current_statement_begin__ = 7;
            stan::math::assign(get_base1_lhs(dVdt,2,"dVdt",1), (get_base1(V,2,"V",1) * ((get_base1(theta,4,"theta",1) * (1 - (get_base1(V,2,"V",1) / get_base1(theta,5,"theta",1)))) - (get_base1(theta,6,"theta",1) * get_base1(V,1,"V",1)))));
            current_statement_begin__ = 9;
            return stan::math::promote_scalar<fun_return_scalar_t__>(dVdt);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct ode_diff_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type>
    operator()(const T0__& t,
             const std::vector<T1__>& V,
             const std::vector<T2__>& theta,
             const std::vector<T3__>& x_r,
             const std::vector<int>& x_i, std::ostream* pstream__) const {
        return ode_diff(t, V, theta, x_r, x_i, pstream__);
    }
};

class real_model_model : public prob_grad {
private:
    int Ntrain;
    int Ntest;
    int n;
    vector<vector<int> > odds;
    int Tinds;
    int Tsums;
    vector<vector<double> > V1;
    vector<vector<double> > V1stds;
    vector<vector<double> > V2;
    vector<vector<double> > V2stds;
    vector<vector<double> > Vsums;
    vector<vector<double> > Vsumstds;
    vector<vector<int> > hdodds;
    vector<vector<double> > hdV1;
    vector<vector<double> > hdV1stds;
    vector<vector<double> > hdV2;
    vector<vector<double> > hdV2stds;
    vector<vector<double> > hdVsums;
    vector<vector<double> > hdVsumstds;
    vector<int> ts_inds_inds;
    vector<double> ts_sums;
    double t0;
    vector<double> x_r;
    vector<int> x_i;
public:
    real_model_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        typedef boost::ecuyer1988 rng_t;
        rng_t base_rng(0);  // 0 seed default
        ctor_body(context__, base_rng, pstream__);
    }

    template <class RNG>
    real_model_model(stan::io::var_context& context__,
        RNG& base_rng__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, base_rng__, pstream__);
    }

    template <class RNG>
    void ctor_body(stan::io::var_context& context__,
                   RNG& base_rng__,
                   std::ostream* pstream__) {
        current_statement_begin__ = -1;

        static const char* function__ = "real_model_model_namespace::real_model_model";
        (void) function__; // dummy call to supress warning
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        context__.validate_dims("data initialization", "Ntrain", "int", context__.to_vec());
        Ntrain = int(0);
        vals_i__ = context__.vals_i("Ntrain");
        pos__ = 0;
        Ntrain = vals_i__[pos__++];
        context__.validate_dims("data initialization", "Ntest", "int", context__.to_vec());
        Ntest = int(0);
        vals_i__ = context__.vals_i("Ntest");
        pos__ = 0;
        Ntest = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n", "int", context__.to_vec());
        n = int(0);
        vals_i__ = context__.vals_i("n");
        pos__ = 0;
        n = vals_i__[pos__++];
        context__.validate_dims("data initialization", "odds", "int", context__.to_vec(Ntrain,2));
        validate_non_negative_index("odds", "Ntrain", Ntrain);
        validate_non_negative_index("odds", "2", 2);
        odds = std::vector<std::vector<int> >(Ntrain,std::vector<int>(2,int(0)));
        vals_i__ = context__.vals_i("odds");
        pos__ = 0;
        size_t odds_limit_1__ = 2;
        for (size_t i_1__ = 0; i_1__ < odds_limit_1__; ++i_1__) {
            size_t odds_limit_0__ = Ntrain;
            for (size_t i_0__ = 0; i_0__ < odds_limit_0__; ++i_0__) {
                odds[i_0__][i_1__] = vals_i__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "Tinds", "int", context__.to_vec());
        Tinds = int(0);
        vals_i__ = context__.vals_i("Tinds");
        pos__ = 0;
        Tinds = vals_i__[pos__++];
        context__.validate_dims("data initialization", "Tsums", "int", context__.to_vec());
        Tsums = int(0);
        vals_i__ = context__.vals_i("Tsums");
        pos__ = 0;
        Tsums = vals_i__[pos__++];
        context__.validate_dims("data initialization", "V1", "double", context__.to_vec(Ntrain,Tinds));
        validate_non_negative_index("V1", "Ntrain", Ntrain);
        validate_non_negative_index("V1", "Tinds", Tinds);
        V1 = std::vector<std::vector<double> >(Ntrain,std::vector<double>(Tinds,double(0)));
        vals_r__ = context__.vals_r("V1");
        pos__ = 0;
        size_t V1_limit_1__ = Tinds;
        for (size_t i_1__ = 0; i_1__ < V1_limit_1__; ++i_1__) {
            size_t V1_limit_0__ = Ntrain;
            for (size_t i_0__ = 0; i_0__ < V1_limit_0__; ++i_0__) {
                V1[i_0__][i_1__] = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "V1stds", "double", context__.to_vec(Ntrain,Tinds));
        validate_non_negative_index("V1stds", "Ntrain", Ntrain);
        validate_non_negative_index("V1stds", "Tinds", Tinds);
        V1stds = std::vector<std::vector<double> >(Ntrain,std::vector<double>(Tinds,double(0)));
        vals_r__ = context__.vals_r("V1stds");
        pos__ = 0;
        size_t V1stds_limit_1__ = Tinds;
        for (size_t i_1__ = 0; i_1__ < V1stds_limit_1__; ++i_1__) {
            size_t V1stds_limit_0__ = Ntrain;
            for (size_t i_0__ = 0; i_0__ < V1stds_limit_0__; ++i_0__) {
                V1stds[i_0__][i_1__] = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "V2", "double", context__.to_vec(Ntrain,Tinds));
        validate_non_negative_index("V2", "Ntrain", Ntrain);
        validate_non_negative_index("V2", "Tinds", Tinds);
        V2 = std::vector<std::vector<double> >(Ntrain,std::vector<double>(Tinds,double(0)));
        vals_r__ = context__.vals_r("V2");
        pos__ = 0;
        size_t V2_limit_1__ = Tinds;
        for (size_t i_1__ = 0; i_1__ < V2_limit_1__; ++i_1__) {
            size_t V2_limit_0__ = Ntrain;
            for (size_t i_0__ = 0; i_0__ < V2_limit_0__; ++i_0__) {
                V2[i_0__][i_1__] = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "V2stds", "double", context__.to_vec(Ntrain,Tinds));
        validate_non_negative_index("V2stds", "Ntrain", Ntrain);
        validate_non_negative_index("V2stds", "Tinds", Tinds);
        V2stds = std::vector<std::vector<double> >(Ntrain,std::vector<double>(Tinds,double(0)));
        vals_r__ = context__.vals_r("V2stds");
        pos__ = 0;
        size_t V2stds_limit_1__ = Tinds;
        for (size_t i_1__ = 0; i_1__ < V2stds_limit_1__; ++i_1__) {
            size_t V2stds_limit_0__ = Ntrain;
            for (size_t i_0__ = 0; i_0__ < V2stds_limit_0__; ++i_0__) {
                V2stds[i_0__][i_1__] = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "Vsums", "double", context__.to_vec(Ntrain,Tsums));
        validate_non_negative_index("Vsums", "Ntrain", Ntrain);
        validate_non_negative_index("Vsums", "Tsums", Tsums);
        Vsums = std::vector<std::vector<double> >(Ntrain,std::vector<double>(Tsums,double(0)));
        vals_r__ = context__.vals_r("Vsums");
        pos__ = 0;
        size_t Vsums_limit_1__ = Tsums;
        for (size_t i_1__ = 0; i_1__ < Vsums_limit_1__; ++i_1__) {
            size_t Vsums_limit_0__ = Ntrain;
            for (size_t i_0__ = 0; i_0__ < Vsums_limit_0__; ++i_0__) {
                Vsums[i_0__][i_1__] = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "Vsumstds", "double", context__.to_vec(Ntrain,Tsums));
        validate_non_negative_index("Vsumstds", "Ntrain", Ntrain);
        validate_non_negative_index("Vsumstds", "Tsums", Tsums);
        Vsumstds = std::vector<std::vector<double> >(Ntrain,std::vector<double>(Tsums,double(0)));
        vals_r__ = context__.vals_r("Vsumstds");
        pos__ = 0;
        size_t Vsumstds_limit_1__ = Tsums;
        for (size_t i_1__ = 0; i_1__ < Vsumstds_limit_1__; ++i_1__) {
            size_t Vsumstds_limit_0__ = Ntrain;
            for (size_t i_0__ = 0; i_0__ < Vsumstds_limit_0__; ++i_0__) {
                Vsumstds[i_0__][i_1__] = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "hdodds", "int", context__.to_vec(Ntest,2));
        validate_non_negative_index("hdodds", "Ntest", Ntest);
        validate_non_negative_index("hdodds", "2", 2);
        hdodds = std::vector<std::vector<int> >(Ntest,std::vector<int>(2,int(0)));
        vals_i__ = context__.vals_i("hdodds");
        pos__ = 0;
        size_t hdodds_limit_1__ = 2;
        for (size_t i_1__ = 0; i_1__ < hdodds_limit_1__; ++i_1__) {
            size_t hdodds_limit_0__ = Ntest;
            for (size_t i_0__ = 0; i_0__ < hdodds_limit_0__; ++i_0__) {
                hdodds[i_0__][i_1__] = vals_i__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "hdV1", "double", context__.to_vec(Ntest,Tinds));
        validate_non_negative_index("hdV1", "Ntest", Ntest);
        validate_non_negative_index("hdV1", "Tinds", Tinds);
        hdV1 = std::vector<std::vector<double> >(Ntest,std::vector<double>(Tinds,double(0)));
        vals_r__ = context__.vals_r("hdV1");
        pos__ = 0;
        size_t hdV1_limit_1__ = Tinds;
        for (size_t i_1__ = 0; i_1__ < hdV1_limit_1__; ++i_1__) {
            size_t hdV1_limit_0__ = Ntest;
            for (size_t i_0__ = 0; i_0__ < hdV1_limit_0__; ++i_0__) {
                hdV1[i_0__][i_1__] = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "hdV1stds", "double", context__.to_vec(Ntest,Tinds));
        validate_non_negative_index("hdV1stds", "Ntest", Ntest);
        validate_non_negative_index("hdV1stds", "Tinds", Tinds);
        hdV1stds = std::vector<std::vector<double> >(Ntest,std::vector<double>(Tinds,double(0)));
        vals_r__ = context__.vals_r("hdV1stds");
        pos__ = 0;
        size_t hdV1stds_limit_1__ = Tinds;
        for (size_t i_1__ = 0; i_1__ < hdV1stds_limit_1__; ++i_1__) {
            size_t hdV1stds_limit_0__ = Ntest;
            for (size_t i_0__ = 0; i_0__ < hdV1stds_limit_0__; ++i_0__) {
                hdV1stds[i_0__][i_1__] = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "hdV2", "double", context__.to_vec(Ntest,Tinds));
        validate_non_negative_index("hdV2", "Ntest", Ntest);
        validate_non_negative_index("hdV2", "Tinds", Tinds);
        hdV2 = std::vector<std::vector<double> >(Ntest,std::vector<double>(Tinds,double(0)));
        vals_r__ = context__.vals_r("hdV2");
        pos__ = 0;
        size_t hdV2_limit_1__ = Tinds;
        for (size_t i_1__ = 0; i_1__ < hdV2_limit_1__; ++i_1__) {
            size_t hdV2_limit_0__ = Ntest;
            for (size_t i_0__ = 0; i_0__ < hdV2_limit_0__; ++i_0__) {
                hdV2[i_0__][i_1__] = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "hdV2stds", "double", context__.to_vec(Ntest,Tinds));
        validate_non_negative_index("hdV2stds", "Ntest", Ntest);
        validate_non_negative_index("hdV2stds", "Tinds", Tinds);
        hdV2stds = std::vector<std::vector<double> >(Ntest,std::vector<double>(Tinds,double(0)));
        vals_r__ = context__.vals_r("hdV2stds");
        pos__ = 0;
        size_t hdV2stds_limit_1__ = Tinds;
        for (size_t i_1__ = 0; i_1__ < hdV2stds_limit_1__; ++i_1__) {
            size_t hdV2stds_limit_0__ = Ntest;
            for (size_t i_0__ = 0; i_0__ < hdV2stds_limit_0__; ++i_0__) {
                hdV2stds[i_0__][i_1__] = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "hdVsums", "double", context__.to_vec(Ntest,Tsums));
        validate_non_negative_index("hdVsums", "Ntest", Ntest);
        validate_non_negative_index("hdVsums", "Tsums", Tsums);
        hdVsums = std::vector<std::vector<double> >(Ntest,std::vector<double>(Tsums,double(0)));
        vals_r__ = context__.vals_r("hdVsums");
        pos__ = 0;
        size_t hdVsums_limit_1__ = Tsums;
        for (size_t i_1__ = 0; i_1__ < hdVsums_limit_1__; ++i_1__) {
            size_t hdVsums_limit_0__ = Ntest;
            for (size_t i_0__ = 0; i_0__ < hdVsums_limit_0__; ++i_0__) {
                hdVsums[i_0__][i_1__] = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "hdVsumstds", "double", context__.to_vec(Ntest,Tsums));
        validate_non_negative_index("hdVsumstds", "Ntest", Ntest);
        validate_non_negative_index("hdVsumstds", "Tsums", Tsums);
        hdVsumstds = std::vector<std::vector<double> >(Ntest,std::vector<double>(Tsums,double(0)));
        vals_r__ = context__.vals_r("hdVsumstds");
        pos__ = 0;
        size_t hdVsumstds_limit_1__ = Tsums;
        for (size_t i_1__ = 0; i_1__ < hdVsumstds_limit_1__; ++i_1__) {
            size_t hdVsumstds_limit_0__ = Ntest;
            for (size_t i_0__ = 0; i_0__ < hdVsumstds_limit_0__; ++i_0__) {
                hdVsumstds[i_0__][i_1__] = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "ts_inds_inds", "int", context__.to_vec(Tinds));
        validate_non_negative_index("ts_inds_inds", "Tinds", Tinds);
        ts_inds_inds = std::vector<int>(Tinds,int(0));
        vals_i__ = context__.vals_i("ts_inds_inds");
        pos__ = 0;
        size_t ts_inds_inds_limit_0__ = Tinds;
        for (size_t i_0__ = 0; i_0__ < ts_inds_inds_limit_0__; ++i_0__) {
            ts_inds_inds[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "ts_sums", "double", context__.to_vec(Tsums));
        validate_non_negative_index("ts_sums", "Tsums", Tsums);
        ts_sums = std::vector<double>(Tsums,double(0));
        vals_r__ = context__.vals_r("ts_sums");
        pos__ = 0;
        size_t ts_sums_limit_0__ = Tsums;
        for (size_t i_0__ = 0; i_0__ < ts_sums_limit_0__; ++i_0__) {
            ts_sums[i_0__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "t0", "double", context__.to_vec());
        t0 = double(0);
        vals_r__ = context__.vals_r("t0");
        pos__ = 0;
        t0 = vals_r__[pos__++];

        // validate, data variables
        check_greater_or_equal(function__,"Tinds",Tinds,1);
        check_greater_or_equal(function__,"Tsums",Tsums,1);
        // initialize data variables
        validate_non_negative_index("x_r", "0", 0);
        x_r = std::vector<double>(0,double(0));
        stan::math::fill(x_r,DUMMY_VAR__);
        validate_non_negative_index("x_i", "0", 0);
        x_i = std::vector<int>(0,int(0));
        stan::math::fill(x_i, std::numeric_limits<int>::min());

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        num_params_r__ += 4;
        num_params_r__ += 2;
        ++num_params_r__;
        ++num_params_r__;
    }

    ~real_model_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("theta1")))
            throw std::runtime_error("variable theta1 missing");
        vals_r__ = context__.vals_r("theta1");
        pos__ = 0U;
        context__.validate_dims("initialization", "theta1", "double", context__.to_vec(4));
        // generate_declaration theta1
        std::vector<double> theta1(4,double(0));
        for (int i0__ = 0U; i0__ < 4; ++i0__)
            theta1[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < 4; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,theta1[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable theta1: ") + e.what());
        }

        if (!(context__.contains_r("lambda")))
            throw std::runtime_error("variable lambda missing");
        vals_r__ = context__.vals_r("lambda");
        pos__ = 0U;
        context__.validate_dims("initialization", "lambda", "double", context__.to_vec(2));
        // generate_declaration lambda
        std::vector<double> lambda(2,double(0));
        for (int i0__ = 0U; i0__ < 2; ++i0__)
            lambda[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < 2; ++i0__)
            try {
            writer__.scalar_unconstrain(lambda[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable lambda: ") + e.what());
        }

        if (!(context__.contains_r("sigma")))
            throw std::runtime_error("variable sigma missing");
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma", "double", context__.to_vec());
        // generate_declaration sigma
        double sigma(0);
        sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sigma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma: ") + e.what());
        }

        if (!(context__.contains_r("V0")))
            throw std::runtime_error("variable V0 missing");
        vals_r__ = context__.vals_r("V0");
        pos__ = 0U;
        context__.validate_dims("initialization", "V0", "double", context__.to_vec());
        // generate_declaration V0
        double V0(0);
        V0 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,V0);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable V0: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        vector<T__> theta1;
        size_t dim_theta1_0__ = 4;
        theta1.reserve(dim_theta1_0__);
        for (size_t k_0__ = 0; k_0__ < dim_theta1_0__; ++k_0__) {
            if (jacobian__)
                theta1.push_back(in__.scalar_lb_constrain(0,lp__));
            else
                theta1.push_back(in__.scalar_lb_constrain(0));
        }

        vector<T__> lambda;
        size_t dim_lambda_0__ = 2;
        lambda.reserve(dim_lambda_0__);
        for (size_t k_0__ = 0; k_0__ < dim_lambda_0__; ++k_0__) {
            if (jacobian__)
                lambda.push_back(in__.scalar_constrain(lp__));
            else
                lambda.push_back(in__.scalar_constrain());
        }

        T__ sigma;
        (void) sigma;  // dummy to suppress unused var warning
        if (jacobian__)
            sigma = in__.scalar_lb_constrain(0,lp__);
        else
            sigma = in__.scalar_lb_constrain(0);

        T__ V0;
        (void) V0;  // dummy to suppress unused var warning
        if (jacobian__)
            V0 = in__.scalar_lb_constrain(0,lp__);
        else
            V0 = in__.scalar_lb_constrain(0);


        // transformed parameters
        vector<T__> theta(6);
        stan::math::initialize(theta, DUMMY_VAR__);
        stan::math::fill(theta,DUMMY_VAR__);


        try {
            current_statement_begin__ = 54;
            stan::math::assign(get_base1_lhs(theta,1,"theta",1), get_base1(theta1,1,"theta1",1));
            current_statement_begin__ = 55;
            stan::math::assign(get_base1_lhs(theta,2,"theta",1), get_base1(theta1,2,"theta1",1));
            current_statement_begin__ = 56;
            stan::math::assign(get_base1_lhs(theta,3,"theta",1), get_base1(lambda,1,"lambda",1));
            current_statement_begin__ = 57;
            stan::math::assign(get_base1_lhs(theta,4,"theta",1), get_base1(theta1,3,"theta1",1));
            current_statement_begin__ = 58;
            stan::math::assign(get_base1_lhs(theta,5,"theta",1), get_base1(theta1,4,"theta1",1));
            current_statement_begin__ = 59;
            stan::math::assign(get_base1_lhs(theta,6,"theta",1), get_base1(lambda,2,"lambda",1));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < 6; ++i0__) {
            if (stan::math::is_uninitialized(theta[i0__])) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: theta" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning

        // model body
        try {
            {
                vector<vector<T__> > V_hat(Tsums, (vector<T__>(2)));
                stan::math::initialize(V_hat, DUMMY_VAR__);
                stan::math::fill(V_hat,DUMMY_VAR__);
                vector<T__> V0s(2);
                stan::math::initialize(V0s, DUMMY_VAR__);
                stan::math::fill(V0s,DUMMY_VAR__);
                int j(0);
                (void) j;  // dummy to suppress unused var warning
                stan::math::fill(j, std::numeric_limits<int>::min());


                current_statement_begin__ = 66;
                for (int i = 1; i <= Ntrain; ++i) {

                    current_statement_begin__ = 67;
                    lp_accum__.add(cauchy_log<propto__>(sigma, 0, 1));
                    current_statement_begin__ = 68;
                    lp_accum__.add(normal_log<propto__>(theta, 1, 2));
                    current_statement_begin__ = 69;
                    lp_accum__.add(normal_log<propto__>(V0, 1, 2));
                    current_statement_begin__ = 70;
                    stan::math::assign(get_base1_lhs(V0s,1,"V0s",1), (V0 * get_base1(get_base1(odds,i,"odds",1),1,"odds",2)));
                    current_statement_begin__ = 71;
                    stan::math::assign(get_base1_lhs(V0s,2,"V0s",1), (V0 * get_base1(get_base1(odds,i,"odds",1),2,"odds",2)));
                    current_statement_begin__ = 73;
                    stan::math::assign(V_hat, integrate_ode_rk45(ode_diff_functor__(), V0s, t0, ts_sums, theta, x_r, x_i, pstream__));
                    current_statement_begin__ = 76;
                    for (int jj = 1; jj <= Tinds; ++jj) {

                        current_statement_begin__ = 77;
                        stan::math::assign(j, get_base1(ts_inds_inds,jj,"ts_inds_inds",1));
                        current_statement_begin__ = 78;
                        lp_accum__.add(normal_log<propto__>(get_base1(get_base1(V1,i,"V1",1),jj,"V1",2), get_base1(get_base1(V_hat,j,"V_hat",1),1,"V_hat",2), (sigma / sqrt(n))));
                        current_statement_begin__ = 79;
                        lp_accum__.add(normal_log<propto__>(get_base1(get_base1(V1stds,i,"V1stds",1),jj,"V1stds",2), 0, (sigma / sqrt(n))));
                        current_statement_begin__ = 80;
                        lp_accum__.add(normal_log<propto__>(get_base1(get_base1(V2,i,"V2",1),jj,"V2",2), get_base1(get_base1(V_hat,j,"V_hat",1),2,"V_hat",2), (sigma / sqrt(n))));
                        current_statement_begin__ = 81;
                        lp_accum__.add(normal_log<propto__>(get_base1(get_base1(V2stds,i,"V2stds",1),jj,"V2stds",2), 0, (sigma / sqrt(n))));
                    }
                    current_statement_begin__ = 83;
                    for (int jj = 1; jj <= Tsums; ++jj) {

                        current_statement_begin__ = 84;
                        stan::math::assign(j, jj);
                        current_statement_begin__ = 85;
                        lp_accum__.add(normal_log<propto__>(get_base1(get_base1(Vsums,i,"Vsums",1),jj,"Vsums",2), (get_base1(get_base1(V_hat,j,"V_hat",1),1,"V_hat",2) + get_base1(get_base1(V_hat,j,"V_hat",1),2,"V_hat",2)), (sigma / sqrt(n))));
                        current_statement_begin__ = 86;
                        lp_accum__.add(normal_log<propto__>(get_base1(get_base1(Vsumstds,i,"Vsumstds",1),jj,"Vsumstds",2), 0, (sigma / sqrt(n))));
                    }
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("theta1");
        names__.push_back("lambda");
        names__.push_back("sigma");
        names__.push_back("V0");
        names__.push_back("theta");
        names__.push_back("V_hat");
        names__.push_back("V0s");
        names__.push_back("j");
        names__.push_back("i");
        names__.push_back("LL");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(4);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(6);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Tsums);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "real_model_model_namespace::write_array";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        vector<double> theta1;
        size_t dim_theta1_0__ = 4;
        for (size_t k_0__ = 0; k_0__ < dim_theta1_0__; ++k_0__) {
            theta1.push_back(in__.scalar_lb_constrain(0));
        }
        vector<double> lambda;
        size_t dim_lambda_0__ = 2;
        for (size_t k_0__ = 0; k_0__ < dim_lambda_0__; ++k_0__) {
            lambda.push_back(in__.scalar_constrain());
        }
        double sigma = in__.scalar_lb_constrain(0);
        double V0 = in__.scalar_lb_constrain(0);
        for (int k_0__ = 0; k_0__ < 4; ++k_0__) {
            vars__.push_back(theta1[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < 2; ++k_0__) {
            vars__.push_back(lambda[k_0__]);
        }
        vars__.push_back(sigma);
        vars__.push_back(V0);

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        vector<double> theta(6, 0.0);
        stan::math::initialize(theta, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(theta,DUMMY_VAR__);


        try {
            current_statement_begin__ = 54;
            stan::math::assign(get_base1_lhs(theta,1,"theta",1), get_base1(theta1,1,"theta1",1));
            current_statement_begin__ = 55;
            stan::math::assign(get_base1_lhs(theta,2,"theta",1), get_base1(theta1,2,"theta1",1));
            current_statement_begin__ = 56;
            stan::math::assign(get_base1_lhs(theta,3,"theta",1), get_base1(lambda,1,"lambda",1));
            current_statement_begin__ = 57;
            stan::math::assign(get_base1_lhs(theta,4,"theta",1), get_base1(theta1,3,"theta1",1));
            current_statement_begin__ = 58;
            stan::math::assign(get_base1_lhs(theta,5,"theta",1), get_base1(theta1,4,"theta1",1));
            current_statement_begin__ = 59;
            stan::math::assign(get_base1_lhs(theta,6,"theta",1), get_base1(lambda,2,"lambda",1));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        // write transformed parameters
        for (int k_0__ = 0; k_0__ < 6; ++k_0__) {
            vars__.push_back(theta[k_0__]);
        }

        if (!include_gqs__) return;
        // declare and define generated quantities
        vector<vector<double> > V_hat(Tsums, (vector<double>(2, 0.0)));
        stan::math::initialize(V_hat, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(V_hat,DUMMY_VAR__);
        vector<double> V0s(2, 0.0);
        stan::math::initialize(V0s, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(V0s,DUMMY_VAR__);
        int j(0);
        (void) j;  // dummy to suppress unused var warning
        stan::math::fill(j, std::numeric_limits<int>::min());
        int i(0);
        (void) i;  // dummy to suppress unused var warning
        stan::math::fill(i, std::numeric_limits<int>::min());
        double LL(0.0);
        (void) LL;  // dummy to suppress unused var warning
        stan::math::initialize(LL, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(LL,DUMMY_VAR__);


        try {
            current_statement_begin__ = 97;
            for (int ii = 1; ii <= Ntest; ++ii) {

                current_statement_begin__ = 98;
                stan::math::assign(i, ii);
                current_statement_begin__ = 99;
                stan::math::assign(get_base1_lhs(V0s,1,"V0s",1), (V0 * get_base1(get_base1(hdodds,i,"hdodds",1),1,"hdodds",2)));
                current_statement_begin__ = 100;
                stan::math::assign(get_base1_lhs(V0s,2,"V0s",1), (V0 * get_base1(get_base1(hdodds,i,"hdodds",1),2,"hdodds",2)));
                current_statement_begin__ = 102;
                stan::math::assign(V_hat, integrate_ode_rk45(ode_diff_functor__(), V0s, t0, ts_sums, theta, x_r, x_i, pstream__));
                current_statement_begin__ = 105;
                stan::math::assign(LL, 0);
                current_statement_begin__ = 106;
                for (int jj = 1; jj <= Tinds; ++jj) {

                    current_statement_begin__ = 107;
                    stan::math::assign(j, get_base1(ts_inds_inds,jj,"ts_inds_inds",1));
                    current_statement_begin__ = 108;
                    stan::math::assign(LL, (LL + normal_log(get_base1(get_base1(hdV1,i,"hdV1",1),jj,"hdV1",2),get_base1(get_base1(V_hat,j,"V_hat",1),1,"V_hat",2),(sigma / sqrt(n)))));
                    current_statement_begin__ = 109;
                    stan::math::assign(LL, (LL + normal_log(get_base1(get_base1(hdV1stds,i,"hdV1stds",1),jj,"hdV1stds",2),0,(sigma / sqrt(n)))));
                    current_statement_begin__ = 110;
                    stan::math::assign(LL, (LL + normal_log(get_base1(get_base1(hdV2,i,"hdV2",1),jj,"hdV2",2),get_base1(get_base1(V_hat,j,"V_hat",1),2,"V_hat",2),(sigma / sqrt(n)))));
                    current_statement_begin__ = 111;
                    stan::math::assign(LL, (LL + normal_log(get_base1(get_base1(hdV2stds,i,"hdV2stds",1),jj,"hdV2stds",2),0,(sigma / sqrt(n)))));
                }
                current_statement_begin__ = 113;
                for (int jj = 1; jj <= Tsums; ++jj) {

                    current_statement_begin__ = 114;
                    stan::math::assign(j, jj);
                    current_statement_begin__ = 115;
                    stan::math::assign(LL, (LL + normal_log(get_base1(get_base1(hdVsums,i,"hdVsums",1),jj,"hdVsums",2),(get_base1(get_base1(V_hat,j,"V_hat",1),1,"V_hat",2) + get_base1(get_base1(V_hat,j,"V_hat",1),2,"V_hat",2)),(sigma / sqrt(n)))));
                    current_statement_begin__ = 116;
                    stan::math::assign(LL, (LL + normal_log(get_base1(get_base1(hdVsumstds,i,"hdVsumstds",1),jj,"hdVsumstds",2),0,(sigma / sqrt(n)))));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
        for (int k_1__ = 0; k_1__ < 2; ++k_1__) {
            for (int k_0__ = 0; k_0__ < Tsums; ++k_0__) {
                vars__.push_back(V_hat[k_0__][k_1__]);
            }
        }
        for (int k_0__ = 0; k_0__ < 2; ++k_0__) {
            vars__.push_back(V0s[k_0__]);
        }
        vars__.push_back(j);
        vars__.push_back(i);
        vars__.push_back(LL);

    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "real_model_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= 4; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= 2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "V0";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= 6; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        for (int k_1__ = 1; k_1__ <= 2; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= Tsums; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "V_hat" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= 2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "V0s" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "j";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "i";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "LL";
        param_names__.push_back(param_name_stream__.str());
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= 4; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= 2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "V0";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= 6; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        for (int k_1__ = 1; k_1__ <= 2; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= Tsums; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "V_hat" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= 2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "V0s" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "j";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "i";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "LL";
        param_names__.push_back(param_name_stream__.str());
    }

}; // model

} // namespace

typedef real_model_model_namespace::real_model_model stan_model;

